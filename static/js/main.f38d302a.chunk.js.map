{"version":3,"sources":["app/hooks.tsx","components/ProfileAvatar.tsx","components/Profile.tsx","features/chat/chatSlice.tsx","components/ChatListItem.tsx","components/ChatList.tsx","components/Conversations.tsx","components/SidebarContent.tsx","components/Sidebar.tsx","components/ChatEntryMessage.tsx","components/ChatEntry.tsx","components/InputMessage.tsx","components/ChatBox.tsx","features/connection/connectionSlice.tsx","pages/Message/index.tsx","assets/construction.svg","api/user.tsx","features/user/userSlice.tsx","components/RegisterBox.tsx","components/LoginBox.tsx","components/AccountBox.tsx","pages/Login/index.tsx","App.tsx","reportWebVitals.ts","app/store.tsx","styles/theme.tsx","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","ProfileAvatar","name","src","size","React","memo","Profile","status","w","bgColor","mh","mt","borderRadius","p","pb","pt","centerContent","fontSize","fontWeight","m","color","colorScheme","chatSlice","createSlice","initialState","onlineUsers","messages","reducers","updateOnlineUsers","state","action","payload","addMessage","push","actions","ChatListItem","isSelected","px","py","_hover","cursor","direction","pl","ChatList","dispatch","socket","connection","chat","useEffect","on","console","log","length","map","user","displayName","email","Conversations","mb","SidebarContent","Sidebar","useDisclosure","isOpen","onOpen","onClose","btnRef","useRef","maxW","h","icon","Hamburger","display","ref","onClick","placement","finalFocusRef","ChatEntryMessage","message","isSenderSelf","fontColor","boxShadow","ChatEntry","sender","gridGap","InputMessage","useState","setMessage","handleSubmit","useForm","onSubmit","messageToSend","destination","type","content","emit","placeholder","onChange","e","target","value","ChevronRight","ChatBox","minH","flexGrow","id","flexDirection","overflow","flex","index","find","undefined","connectionSlice","updateSocket","Messages","history","useHistory","toast","useToast","token","title","description","duration","isClosable","position","io","auth","disconnect","alignItems","API_URL","process","postLogin","password","a","axios","post","postRegister","userSlice","level","updateUser","RegisterBox","setEmail","setPassword","confirmPassword","setConfirmPassword","setDisplayName","handleRegister","response","data","justifyContent","height","variant","LoginBox","toggle","handleLogin","AccountBox","isViewRegister","setIsViewRegister","Login","Construction","App","path","component","Message","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","userReducer","connectionReducer","chatReducer","middleware","getDefaultMiddleware","serializableCheck","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f38d302a.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\";\nimport { Avatar } from \"@chakra-ui/react\";\n\ntype Props = {\n  name?: string;\n  src: string;\n  size: string;\n};\n\nconst ProfileAvatar = ({ name, src, size }: Props) => {\n  return <Avatar name={name || \"Anonymous\"} src={src} size={size} />;\n};\n\nexport default React.memo(ProfileAvatar);\n","import React from \"react\";\n\nimport { Center, Box } from \"@chakra-ui/layout\";\n\nimport ProfileAvatar from \"./ProfileAvatar\";\nimport { Button, Text, Container } from \"@chakra-ui/react\";\n\ntype Props = {\n  name?: string;\n  status: string;\n};\n\nconst Profile = ({ name, status }: Props) => {\n  return (\n    <Box w=\"100%\">\n      <Center>\n        <ProfileAvatar name={name} src=\"\" size=\"lg\" />\n      </Center>\n      <Box bgColor=\"gray.100\" mh=\"213px\" mt={-9} borderRadius={12} p={4} pb={7}>\n        <Container pt={8} centerContent>\n          <Text fontSize=\"xl\" fontWeight=\"bold\" m={0}>\n            {name}\n          </Text>\n          <Text fontSize=\"sm\" fontWeight=\"bold\" color=\"gray.400\" mt={0}>\n            {status}\n          </Text>\n          <Button colorScheme=\"linkedin\" w=\"100%\" mt={8} size=\"sm\">\n            Chat Preferences\n          </Button>\n        </Container>\n      </Box>\n    </Box>\n  );\n};\n\nexport default React.memo(Profile);\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { ChatState, User, Message } from \"../../types/chat\";\n\n// Define the initial state using that type\nconst initialState: ChatState = {\n  onlineUsers: [],\n  messages: [],\n};\n\nexport const chatSlice = createSlice({\n  name: \"chat\",\n  initialState,\n  reducers: {\n    updateOnlineUsers: (state, action: PayloadAction<User[]>) => {\n      return {\n        ...state,\n        onlineUsers: action.payload,\n      };\n    },\n    addMessage: (state, action: PayloadAction<Message>) => {\n      state.messages?.push(action.payload);\n    },\n  },\n});\n\nexport const { updateOnlineUsers, addMessage } = chatSlice.actions;\n\nexport default chatSlice.reducer;\n","import React from \"react\";\nimport { Flex, Box, Text } from \"@chakra-ui/layout\";\n\nimport ProfileAvatar from \"./ProfileAvatar\";\n\ntype Props = {\n  name: string; // Name of Chat Participant\n  isSelected?: boolean; // User currently selected in chat\n};\n\nconst ChatListItem = ({ name, isSelected }: Props) => {\n  const bgColor = isSelected ? \"gray.100\" : \"none\";\n  return (\n    <Box\n      bgColor={bgColor}\n      px={4}\n      py={4}\n      borderRadius={12}\n      _hover={{ bgColor: \"gray.200\", cursor: \"pointer\" }}\n    >\n      <Flex direction=\"row\">\n        <ProfileAvatar name={name} src=\"\" size=\"md\" />\n        <Box w=\"100%\" pl={4}>\n          {/* Name of Chat Participant */}\n          <Text fontWeight=\"bold\">{name}</Text>\n          {/* Status */}\n          <Text fontSize=\"sm\" color=\"gray.700\">\n            Online\n          </Text>\n        </Box>\n      </Flex>\n    </Box>\n  );\n};\n\nexport default React.memo(ChatListItem);\n","import React, { useEffect } from \"react\";\nimport { useAppSelector, useAppDispatch } from \"../app/hooks\";\n\nimport { updateOnlineUsers } from \"../features/chat/chatSlice\";\n\nimport ChatListItem from \"./ChatListItem\";\n\nconst ChatList = () => {\n  const dispatch = useAppDispatch();\n  const { socket } = useAppSelector((state) => state.connection);\n  const { onlineUsers } = useAppSelector((state) => state.chat);\n\n  useEffect(() => {\n    // Get Online Users\n    socket?.on(\"onlineUsers\", (onlineUsers) => {\n      dispatch(updateOnlineUsers(onlineUsers));\n    });\n  }, [socket, dispatch]);\n\n  useEffect(() => {\n    console.log(\"Online Users:\", onlineUsers?.length);\n  }, [onlineUsers]);\n  return (\n    <div>\n      {onlineUsers?.map((user) => (\n        <ChatListItem\n          key={user.email}\n          name={user.displayName}\n          isSelected={false}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default React.memo(ChatList);\n","import { Box, Text } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ChatList from \"./ChatList\";\n\nconst Conversations = () => {\n  return (\n    <Box pt={4}>\n      <Text fontSize=\"2xl\" fontWeight=\"bold\" mb={4} mt={8}>\n        Online Users\n      </Text>\n      <ChatList />\n    </Box>\n  );\n};\n\nexport default React.memo(Conversations);\n","import React from \"react\";\nimport { useAppSelector } from \"../app/hooks\";\n\nimport Profile from \"./Profile\";\nimport Conversations from \"./Conversations\";\n\nconst SidebarContent = () => {\n  const { displayName } = useAppSelector((state) => state.user);\n\n  return (\n    <>\n      <Profile name={displayName} status=\"Active Now\" />\n      <Conversations />\n    </>\n  );\n};\n\nexport default React.memo(SidebarContent);\n","import React from \"react\";\nimport { Socket } from \"socket.io-client\";\nimport {\n  Flex,\n  Drawer,\n  DrawerOverlay,\n  DrawerCloseButton,\n  DrawerHeader,\n  DrawerBody,\n  DrawerContent,\n  //DrawerFooter,\n  useDisclosure,\n  IconButton,\n} from \"@chakra-ui/react\";\n\nimport { HamburgerIcon } from \"@chakra-ui/icons\";\nimport SidebarContent from \"./SidebarContent\";\n\ntype Props = {\n  socket?: Socket;\n};\nconst Sidebar = ({ socket }: Props) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const btnRef = React.useRef<HTMLButtonElement>(null);\n\n  return (\n    <Flex\n      w={[\"auto\", \"auto\", \"388px\", \"388px\"]}\n      maxW=\"388px\"\n      h=\"100%\"\n      p={[0, 0, 4, 4]}\n    >\n      <IconButton\n        aria-label=\"Open Menu\"\n        size=\"lg\"\n        bgColor=\"white\"\n        icon={<HamburgerIcon />}\n        display={[\"flex\", \"flex\", \"none\", \"none\"]}\n        ref={btnRef}\n        onClick={onOpen}\n      />\n      <Drawer\n        isOpen={isOpen}\n        placement=\"left\"\n        onClose={onClose}\n        finalFocusRef={btnRef}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Ethereal Chat</DrawerHeader>\n\n          <DrawerBody>\n            <SidebarContent />\n          </DrawerBody>\n\n          {/* <DrawerFooter>\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"blue\">Save</Button>\n          </DrawerFooter> */}\n        </DrawerContent>\n      </Drawer>\n      {/*Profile */}\n      <Flex\n        direction=\"column\"\n        w=\"100%\"\n        display={[\"none\", \"none\", \"flex\", \"flex\"]}\n      >\n        <SidebarContent />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default React.memo(Sidebar);\n","import { Box } from \"@chakra-ui/react\";\nimport React from \"react\";\n\ntype Props = {\n  message?: string;\n  isSenderSelf?: boolean;\n};\nconst ChatEntryMessage = ({ message, isSenderSelf }: Props) => {\n  const bgColor = isSenderSelf ? \"cyan.700\" : \"white\";\n  const fontColor = isSenderSelf ? \"white\" : \"black\";\n\n  return (\n    <Box\n      bgColor={bgColor}\n      color={fontColor}\n      p={3}\n      maxW={[64, 64, 96, 96]}\n      borderRadius={12}\n      _hover={{ cursor: \"pointer\", boxShadow: \"md\" }}\n    >\n      {message}\n    </Box>\n  );\n};\n\nexport default React.memo(ChatEntryMessage);\n","import React from \"react\";\n\nimport { Flex } from \"@chakra-ui/layout\";\nimport ProfileAvatar from \"./ProfileAvatar\";\nimport ChatEntryMessage from \"./ChatEntryMessage\";\n\ntype Props = {\n  sender?: string;\n  message?: string;\n  isSenderSelf?: boolean;\n};\n\nconst ChatEntry = ({ sender, message, isSenderSelf }: Props) => {\n  // Invert direction if sender is self\n  const direction = isSenderSelf ? \"row-reverse\" : \"row\";\n  return (\n    <>\n      <Flex direction={direction} gridGap={4} py={2}>\n        <ProfileAvatar name={sender} src=\"\" size=\"md\" />\n        <ChatEntryMessage isSenderSelf={isSenderSelf} message={message} />\n      </Flex>\n    </>\n  );\n};\n\nexport default React.memo(ChatEntry);\n","import React, { useState } from \"react\";\n\nimport { Box } from \"@chakra-ui/layout\";\nimport {\n  IconButton,\n  Input,\n  InputGroup,\n  InputRightElement,\n} from \"@chakra-ui/react\";\nimport { ChevronRightIcon } from \"@chakra-ui/icons\";\n\nimport { useForm } from \"react-hook-form\";\nimport { useAppSelector } from \"../app/hooks\";\nimport { Message } from \"../types/chat\";\n\nconst InputMessage = () => {\n  const [message, setMessage] = useState(\"\");\n  const { handleSubmit } = useForm();\n  const { socket } = useAppSelector((state) => state.connection);\n  const { email } = useAppSelector((state) => state.user);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setMessage(e.target.value);\n  };\n  const sendMessage = () => {\n    const messageToSend: Message = {\n      sender: email,\n      destination: \"__BROADCAST__\",\n      payload: {\n        type: \"chat\",\n        content: message,\n      },\n    };\n    socket?.emit(\"message\", messageToSend);\n\n    setMessage(\"\");\n  };\n  return (\n    <Box bgColor=\"white\">\n      <form onSubmit={handleSubmit(sendMessage)}>\n        <InputGroup size=\"lg\">\n          <Input\n            placeholder=\"Write your message here\"\n            onChange={handleInputChange}\n            value={message}\n          />\n          <InputRightElement>\n            <IconButton\n              aria-label=\"Send\"\n              icon={<ChevronRightIcon />}\n              size=\"sm\"\n              type=\"submit\"\n            />\n          </InputRightElement>\n        </InputGroup>\n      </form>\n    </Box>\n  );\n};\n\nexport default React.memo(InputMessage);\n","import React, { useEffect } from \"react\";\nimport { Flex, Box } from \"@chakra-ui/react\";\n\nimport ChatEntry from \"./ChatEntry\";\nimport InputMessage from \"./InputMessage\";\n\nimport { Message } from \"../types/chat\";\n\nimport { addMessage } from \"../features/chat/chatSlice\";\nimport { useAppSelector, useAppDispatch } from \"../app/hooks\";\n\nconst ChatBox = () => {\n  const dispatch = useAppDispatch();\n  const { socket } = useAppSelector((state) => state.connection);\n  const { onlineUsers, messages } = useAppSelector((state) => state.chat);\n\n  useEffect(() => {\n    console.log(\"Received\", messages);\n    console.log(onlineUsers);\n    // eslint-disable-next-line\n  }, [messages]);\n\n  useEffect(() => {\n    // On Message Listener\n    socket?.on(\"message\", ({ sender, destination, payload }: Message) => {\n      dispatch(addMessage({ sender, destination, payload }));\n      console.log({ sender, destination, payload });\n    });\n    // eslint-disable-next-line\n  }, [socket]);\n\n  return (\n    <Box w=\"full\" h=\"100vh\" p={[0, 0, 4, 4]}>\n      {/* container */}\n      <Flex bgColor=\"gray.100\" direction=\"column\" h=\"100%\" px={8} py={4}>\n        {/* section */}\n        <Flex direction=\"column\" minH={0} flexGrow={1}>\n          {/* scrollable content */}\n          <Flex\n            id=\"messages\"\n            flexDirection=\"column\"\n            overflow=\"scroll\"\n            minH={0}\n            flex={1}\n            flexGrow={1}\n            mb={4}\n          >\n            {messages?.map(({ sender, payload }, index) => (\n              <ChatEntry\n                key={index}\n                sender={\n                  onlineUsers?.find((user) => user.email === sender)\n                    ?.displayName\n                }\n                message={payload.content}\n              />\n            ))}\n          </Flex>\n          <InputMessage />\n        </Flex>\n      </Flex>\n    </Box>\n  );\n};\n\nexport default React.memo(ChatBox);\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { Socket } from \"socket.io-client\";\nimport { ConnectionState } from \"../../types/connection\";\n\n// Define the initial state using that type\nconst initialState: ConnectionState = {\n  socket: undefined,\n};\n\nexport const connectionSlice = createSlice({\n  name: \"connection\",\n  initialState,\n  reducers: {\n    updateSocket: (state, action: PayloadAction<Socket>) => {\n      return {\n        socket: action.payload,\n      };\n    },\n  },\n});\n\nexport const { updateSocket } = connectionSlice.actions;\n\nexport default connectionSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Flex, useToast } from \"@chakra-ui/react\";\nimport io from \"socket.io-client\";\n\nimport Sidebar from \"../../components/Sidebar\";\nimport ChatBox from \"../../components/ChatBox\";\n\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { updateSocket } from \"../../features/connection/connectionSlice\";\n\nconst Messages = () => {\n  const history = useHistory();\n  const toast = useToast();\n  const dispatch = useAppDispatch();\n  const { user } = useAppSelector((state) => state);\n\n  useEffect(() => {\n    // Verify token\n    if (!user.token) {\n      toast({\n        title: \"Invalid Token\",\n        description: \"Please login to continue\",\n        status: \"warning\",\n        duration: 9000,\n        isClosable: true,\n        position: \"top\",\n      });\n      history.push(\"/login\");\n    }\n\n    // Create socket.io connection\n    const socket = io(\"ws://localhost:4000\");\n    socket.auth = {\n      token: user.token,\n    };\n\n    dispatch(updateSocket(socket));\n    return () => {\n      socket?.disconnect();\n    };\n  }, [dispatch, history, toast, user.token]);\n\n  return (\n    <Flex\n      w=\"full\"\n      alignItems=\"stretch\"\n      flexDirection={[\"row\", \"row\", \"row\", \"row\"]}\n    >\n      {/*Left Pane */}\n      <Sidebar />\n      {/*Main Pane */}\n      <ChatBox />\n    </Flex>\n  );\n};\n\nexport default Messages;\n","export default __webpack_public_path__ + \"static/media/construction.3b356196.svg\";","import axios from \"axios\";\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const postLogin = async (email: string, password: string) => {\n  return await axios.post(`${API_URL}/user/login`, { email, password });\n};\n\nexport const postRegister = async (\n  email: string,\n  password: string,\n  displayName: string\n) => {\n  return await axios.post(`${API_URL}/user/register`, {\n    email,\n    password,\n    displayName,\n  });\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport type { RootState } from \"../../app/store\";\n\nimport { UserState } from \"../../types/user\";\n\n// Define the initial state using that type\nconst initialState: UserState = {\n  email: \"\",\n  displayName: \"\",\n  token: \"\",\n  level: 0,\n};\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    updateUser: (state, action: PayloadAction<UserState>) => {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    },\n  },\n});\n\nexport const { updateUser } = userSlice.actions;\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectToken = (state: RootState) => state.user.token;\n\nexport default userSlice.reducer;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { Flex } from \"@chakra-ui/layout\";\nimport { Input, Text, Button, FormControl, useToast } from \"@chakra-ui/react\";\n\nimport { postRegister } from \"../api/user\";\nimport { useAppDispatch } from \"../app/hooks\";\nimport { updateUser } from \"../features/user/userSlice\";\n\nconst RegisterBox = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [displayName, setDisplayName] = useState(\"\");\n\n  const history = useHistory();\n  const toast = useToast();\n  const dispatch = useAppDispatch();\n\n  const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setEmail(e.target.value);\n  const handlePassword = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setPassword(e.target.value);\n  const handleConfirmPassword = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setConfirmPassword(e.target.value);\n  const handleDisplayName = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setDisplayName(e.target.value);\n\n  const handleRegister = async () => {\n    // validate inputs\n    if (password !== confirmPassword) {\n      return toast({\n        title: \"Ooops\",\n        description: \"Passwords do not match\",\n        status: \"warning\",\n        duration: 9000,\n        isClosable: true,\n        position: \"top\",\n      });\n    }\n    try {\n      const response = await postRegister(email, password, displayName);\n      if (response.status === 200) {\n        const { user, token } = response.data;\n        dispatch(\n          updateUser({\n            email: user.email,\n            level: user.level,\n            token: token,\n          })\n        );\n        toast({\n          title: \"Success\",\n          description: \"Account created\",\n          status: \"success\",\n          duration: 9000,\n          isClosable: true,\n          position: \"top\",\n        });\n        history.push(\"/\");\n      }\n    } catch ({ response }) {\n      const message = response.data;\n      toast({\n        title: \"Registration Failed\",\n        description: message,\n        status: \"error\",\n        duration: 9000,\n        isClosable: true,\n        position: \"top\",\n      });\n    }\n  };\n  return (\n    <Flex direction=\"column\" gridGap={4} justifyContent=\"center\" height=\"100%\">\n      <FormControl>\n        <Text fontWeight=\"bold\" fontSize=\"2xl\">\n          Create an account\n        </Text>\n        <Input\n          name=\"email\"\n          size=\"lg\"\n          variant=\"filled\"\n          placeholder=\"Email address\"\n          mt={4}\n          onChange={handleEmail}\n        />\n        <Input\n          name=\"displayName\"\n          size=\"lg\"\n          variant=\"filled\"\n          placeholder=\"Display Name\"\n          mt={4}\n          onChange={handleDisplayName}\n        />\n        <Input\n          name=\"password\"\n          size=\"lg\"\n          variant=\"filled\"\n          placeholder=\"Password\"\n          type=\"password\"\n          mt={4}\n          onChange={handlePassword}\n        />\n        <Input\n          name=\"confirmPassword\"\n          size=\"lg\"\n          variant=\"filled\"\n          placeholder=\"Confirm Password\"\n          type=\"password\"\n          mt={4}\n          onChange={handleConfirmPassword}\n        />\n        <Button\n          colorScheme=\"blue\"\n          size=\"md\"\n          mt={9}\n          borderRadius={99}\n          w=\"full\"\n          type=\"submit\"\n          onSubmit={handleRegister}\n          onClick={handleRegister}\n        >\n          Register\n        </Button>\n      </FormControl>\n    </Flex>\n  );\n};\n\nexport default RegisterBox;\n","import React, { useState, useEffect } from \"react\";\nimport { Flex, Center } from \"@chakra-ui/layout\";\nimport { Input, Text, Button, Divider, useToast } from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { updateUser } from \"../features/user/userSlice\";\nimport { useAppSelector, useAppDispatch } from \"../app/hooks\";\n\nimport { postLogin } from \"../api/user\";\n\ntype Props = {\n  toggle: Function;\n};\n\nconst LoginBox = ({ toggle }: Props) => {\n  const { handleSubmit } = useForm();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const history = useHistory();\n  const toast = useToast();\n\n  const dispatch = useAppDispatch();\n  const { user } = useAppSelector((state) => state);\n\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value);\n  };\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value);\n  };\n\n  const handleLogin = async () => {\n    try {\n      const response = await postLogin(email, password);\n      // Update User State\n      if (response.status === 200) {\n        const { user, token } = response.data;\n        dispatch(\n          updateUser({\n            email: user.email,\n            displayName: user.displayName,\n            level: user.level,\n            token: token,\n          })\n        );\n        toast({\n          title: \"Success\",\n          description: \"You have successfully logged in.\",\n          status: \"success\",\n          duration: 9000,\n          isClosable: true,\n          position: \"top\",\n        });\n        history.push(\"/\");\n      }\n    } catch ({ response }) {\n      const message = response.data;\n      toast({\n        title: \"Login Failed\",\n        description: message,\n        status: \"error\",\n        duration: 9000,\n        isClosable: true,\n        position: \"top\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    console.log(user);\n  }, [user]);\n  return (\n    <Flex direction=\"column\" gridGap={4} justifyContent=\"center\" height=\"100%\">\n      <form onSubmit={handleSubmit(handleLogin)}>\n        <Text fontWeight=\"bold\" fontSize=\"2xl\">\n          Login to continue\n        </Text>\n        <Input\n          size=\"lg\"\n          variant=\"filled\"\n          placeholder=\"Email address\"\n          mt={4}\n          onChange={handleEmailChange}\n        />\n        <Input\n          size=\"lg\"\n          variant=\"filled\"\n          placeholder=\"Password\"\n          type=\"password\"\n          onChange={handlePasswordChange}\n          mt={4}\n        />\n        <Button\n          colorScheme=\"blue\"\n          size=\"md\"\n          mt={9}\n          borderRadius={99}\n          w=\"full\"\n          type=\"submit\"\n        >\n          Login\n        </Button>\n\n        <Divider mt={4} />\n        <Center>\n          <Button\n            colorScheme=\"blue\"\n            variant=\"link\"\n            mt={4}\n            onClick={() => toggle()}\n          >\n            Create an account\n          </Button>\n        </Center>\n      </form>\n    </Flex>\n  );\n};\n\nexport default LoginBox;\n","import React, { useState } from \"react\";\n\nimport { Flex } from \"@chakra-ui/layout\";\nimport RegisterBox from \"./RegisterBox\";\nimport LoginBox from \"./LoginBox\";\n\nconst AccountBox = () => {\n  const [isViewRegister, setIsViewRegister] = useState(false);\n  const toggleRegister = () => {\n    setIsViewRegister(!isViewRegister);\n  };\n  return (\n    <Flex direction=\"column\" gridGap={4} justifyContent=\"center\" height=\"100%\">\n      {!isViewRegister && <LoginBox toggle={toggleRegister} />}\n      {isViewRegister && <RegisterBox />}\n    </Flex>\n  );\n};\n\nexport default AccountBox;\n","import React from \"react\";\nimport { Flex, Box } from \"@chakra-ui/layout\";\nimport { Image } from \"@chakra-ui/react\";\n\nimport Construction from \"../../assets/construction.svg\";\nimport AccountBox from \"../../components/AccountBox\";\nconst Login = () => {\n  return (\n    <Flex direction=\"row\" h=\"100vh\">\n      <Box flexGrow={1}>\n        <Flex justifyContent=\"center\" h=\"100vh\">\n          <Image src={Construction} />\n        </Flex>\n      </Box>\n      <Box w={\"500px\"} p={8} h=\"100vh\">\n        <AccountBox />\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Message from \"./pages/Message\";\nimport Login from \"./pages/Login\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/\" component={Message} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport userReducer from \"../features/user/userSlice\";\nimport connectionReducer from \"../features/connection/connectionSlice\";\nimport chatReducer from \"../features/chat/chatSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    connection: connectionReducer,\n    chat: chatReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n    }),\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","// theme.ts\nimport { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n  initialColorMode: \"light\",\n  useSystemColorMode: false,\n};\n\n// 3. extend the theme\nconst theme = extendTheme({ config });\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// Chakra-UI\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\n\n// Redux\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport theme from \"./styles/theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider>\n        <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n        <App />\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}